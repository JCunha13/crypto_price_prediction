import requests
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Fetch historical crypto data
def fetch_crypto_data(crypto, currency="usd", days="30"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart"
    params = {"vs_currency": currency, "days": days}
    response = requests.get(url, params=params)
    data = response.json()
    prices = data["prices"]
    df = pd.DataFrame(prices, columns=["timestamp", "price"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    return df

# Train a prediction model
def predict_prices(df):
    df["days"] = (df["timestamp"] - df["timestamp"].min()).dt.days
    X = df[["days"]]
    y = df["price"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse:.2f}")
    
    return model, X, y

# Main program
crypto = "bitcoin"
df = fetch_crypto_data(crypto)
print(f"Fetched {len(df)} data points for {crypto}")

model, X, y = predict_prices(df)

# Plot data and prediction
plt.figure(figsize=(10, 6))
plt.scatter(df["timestamp"], df["price"], label="Actual Prices", alpha=0.6)
plt.plot(df["timestamp"], model.predict(X), color="red", label="Prediction", alpha=0.8)
plt.title(f"{crypto.capitalize()} Price Prediction")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()
plt.show()
